열거형 
- 상수를 가지고 생성되는 객체들을 한 곳에 모아둔 하나의 묶음
- 상수를 사용자가 지정한 이름으로부터 0부터 순차적으로 증가(index)
- 클래스처럼 보이게 하는 상수
- 관련있는 상수들을 모아서 배열처럼 정의

name() : 열거형 상수의 이름을 문자열로 반환
ordinal() : 열거형 상수가 정의된  순서를 반환
valueof()("상수명") : 인자로 받은 String 값과 일치하는 열거형 객체를 반환한다. 없으면 예외발생
values() : 열거형 안에 들어있는 내용을 Enum타입의 배열로 반환

Enum 매핑
열거형 상수에 고유한 값을 설정할 수 있다.

enum 은 데이터의 그룹화 및 관리에 용이
데이터들이 서로 관련되어있지만 관련된 형태를 구현하는데 있어
애로사항이 생긴다면  enum을 통해 한 클래스 내에서 관리할 수 있다.

어노테이션
- 프로그램의 소스코드 안에 다른 프로그램을 위한 정보를 미리 약속된 형식으로 포함시킨 것
- 어노테이션은 주석(comment) 처럼 프로그래밍 언어에 영향을 미치지 않으면서도 
다른 프로그램에게 유용한 정보를 제공할 수 있다는 장점이 있다
- 어노테이션의 뜻은 주석, 주해, 메모이다.

표준 어노테이션
- 자바에서 제공하는 기본 어노테이션

메타 어노테이션
- 어노테이션을 만들기 위한 어노테이션
- 스프링에서는 어노테이션으로 많이 통제를 한다
- java.lang.annotation 패키지에 정의되어 있다.

@Target
- 어노테이션이 적용 가능한 대상을 지정하는데 사용된다
@Targe(ElementType.TYPE) 클래스의 어떤 요소에나 적용가능(기본값)
@Targe(ElementType.FIELD) 특정 필드에 적용
@Targe(ElementType.METHOD) 특정 메서드에 적용
@Targe(ElementType.PARAMETER) 메서드의 매개변수
@Targe(ElementType.CONSTRUCTOR) 생성자

@Retention
- 어노테이션이 유지되는 기간을 지정하는데 사용

@Retention(SOURCE) 소스코드에만 이용가능하며 컴파일 후에는 사라짐
@Retention(CLASS) 어노테이션이 .class 파일에 존재하지만 런타임시 사라짐
@Retention(RUNTIME) 런타임시 사용 가능(실행시 정보 제공)
