형변환(casting)

자료형을 다른 자료형으로 변환하는 것을 말한다.
모든 연산은 기본적으로 같은 자료형들끼리만 수행할 수 있다.
따라서 서로 다른 자료형의 연산을 수행하기 위해서는 같은 자료형으로 변환해야 한다.

자동형변환
	작은 자료형 -> 큰 자료형
	
강제형변환
	큰 자료형 -> 작은 자료형
	내가 예상한 결과와 다른 결과가 나올 수 있음 *주의*
	
데이터의 입력
- 키보드를 통해 다양한 데이터를 자유롭게 입력하는 방법
- 키보드를 통해 입력하는 데이터를 문자열로 얻기 위해서는
'java.util' 패키지에 있는 Scanner 클래스를 이용해야한다

다른 패키지에 있는 클래스를 사용하려고 할때 import 라는 작업을 해야한다.
import 해당 클래스의 경로 : import java.util.Scanner;

Scanner 클래스의 객체 생성
Scanner 객체명 = new Scanner(System.in);

int 변수명 = 객체명.nextInt(); 정수를 키보드를 통해 입력받는다
nextByte() 입력받은 값을 byte 형으로 변환
nextShort() 입력받은 값을 Short 형으로 변환
nextInt() 입력받은 값을 int 형으로 변환
nextLong() 입력받은 값을 long 형으로 변환
nextFloat() 입력받은 값을 float 형으로 변환
nextDouble() 입력받은 값을 double 형으로 변환
nextLine() 입력받은 라인 전체를 문자열 타입으로 반환, 엔터 쓰면 끝남
next() 입력받은 값을 문자열 타입으로 반환, 띄어쓰기 쓰면 끝남

연산자(Operator)
- 연산이란 데이터를 처리하고 결과를 산출하는 작업을 말한다
- 연산이란 항(피연산자) 연산자로 이루어진다.
- 항은 연산에 사용되는 값을 의미하며, 연산자는 기호를 의미한다
- 항과 연산자를 이용해 연산 과정을 나열한 것을 연산식(expression)이라고 한다

기본 연산자의 종류
- 자바는 사칙연산을 비롯해 다양한 연산자를 제공하고 있다.
- 피 연산자의 개수에 따라 단항, 이항, 삼항 연산자로 분류할 수 있다.
- 사용 목적에 따라 산술, 증감, 대입, 논리, 비트, 증감 등으로 분류 가능

최고 연산자		., ,, ()
증감 연산자 		++, --
산술 연산자 		+, -, *, /, %
시프트 연산자 		>>, <<
비교 연산자 		>, <, <=, >=, !=, ==
논리 연산자 		&&, ||, !
비트 연산자 		&, |, ~, ^
대입 연산자		=, +=, -=, *=, /=, %=
삼항 연산자		조건식 ? A : B (조건식이 참이면 A, 거짓이면 B 반환)

