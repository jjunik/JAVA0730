JDK1.8부터 함수형 프로그래밍 '람다식(Lambda expression)'을 지원하고 있다.
람다식은 이름이 없는 익명 함수를 만들기 위한 표현식을 말한다.
자바는 객체를 기반으로 프로그램을 구현하는 객체 지향 프로그램이다.
따라서 클래스를 먼저 생성하고, 클래스 안에 메서드와 객체를 만들어 사용해야 한다.
하지만 함수형 프로그래밍은 객체 지향 프로그램과 달리 함수만을 구현하고 실행할 수 있는 개발방식이다

람다식 도입된 이유
- 함수형 프로그래밍 방식
- 자바에서는 함수형 프로그래밍 방식이 적용되지 않았다.
- 자바는 클래스에 함수를 정의하고 객체를 통해 호출하는 방식을 사용하고 있다.

람다식 문법
- 기존의 자바 문법과는 달라서 객체 지향 프로그래밍에 익숙한 개발자들은 다소 생소할 수 있다.
- 하지만 문법이 간결해지고, 원하는 결과를 쉽게 집계할 수 있어 익숙해지면 큰 장점이 있다.

int add(int x, int y){
	return x+y;
}

위 함수를 람다식으로 표현하기
(int x, int y) -> {return x+y;}

- 메서드의 이름과 반환형을 제거하고 화살표를 이용해 구현한다.

소괄호 생략 하기
- 람다식 문법에서는 파라미터의 자료형을 생략할 수 있다.
(x, y) -> {return x+y;}
- 파라미터가 한 개인 경우 소괄호도 생략할 수 있다.
(String str) -> {System.out.println(str);}

(str) -> {System.out.println(str);}

str -> {System.out.println(str);}

중괄호 생략하기
- 함수의 반환형이 void 라면 중괄호도 생략할 수 있다.
str -> System.out.println(str);

- 반환형이 있을때 return 키워드와 중괄호를 같이 생략 할 수 있다.
(x, y) -> x+y;

함수형 인터페이스
- 객체지향 프로그램에서 인터페이스를 사용하기 위해서는 구현체를 만든 뒤 사용해야 한다.
- 람다식은 위와 같은 과정을 생략할 수 있다.
- 단, 람다식을 이용해 인터페이스를 사용할 경우,
인터페이스 안에는 하나의 추상 메서드만 작성 할 수 있다.
- 람다식을 구현하기 위해서는 먼저 인터페이스를 만들고, 
인터페이스에 람다식으로 구현할 메서드를 선언해야 한다.
- 오직 하나의 추상 메서드가 선언된 인터페이스 만이 람다식의 타겟이 되는데
- 이를 함수형 인터페이스라고 한다.