java에서 컬렉션의 데이터를 저장한다.
특정 조건에 맞게만 필터링해서 출력을 하고싶다.

반면 SQL 문법의 경우 사용자가 원하는 조건의 데이터를 검색할 때 명시적이고 간단하다

자바에서 새로 추가된 기능인 스트림은 java의 컬렉션 데이터의 대해 SQL질의문 처럼 데이터를 
처리할 수있는 기능을 가지고있다.

자바에서 컬렉션 데이터를 처리할 때 for문 , foreach 를  사용하면 컬렉션 내부의 요소들을 하나씩 다루다었
크기가 작으면 상관이 없지만 커지면 루프문의 사용은 성능 저하를 일으켰다.

스트림의 등장 
java8에 추가된 기능으로 컬렉션 데이터를 선언형으로 쉽게 처리할 수 있다.
복잡한 루프문을 사용하지 않아도 되며 루프문을 중첩해서 사용해야하는 경우도 많이 줄어들었다

스트림은 데이터의 흐름이다.
배열 또는 컬렉션 객체에 메서드 여러개를 좋조합해서 원하는 결과를 필터링하고 가공된 결과를 얻을 수 잇다.
또한 람다식을 이용해서 코드의 양을 줄이고 간결하게 표현할 수 있다.

즉 배열과 컬렉션을 함수형으로 처리할 수 있다.

스트림의 특징

스트림은 데이터 소스로부터 데이터를 읽기만 할 뿐, 데이터 소스를 변경하지 않는다.(원본은 안바뀜)
스트림은 한 번 사용하면 닫히기 때문에 다시 사용할 수 없다.
(다시 사용하려면 스트림을 다시 생성해야 한다.)

스트림을 사용하는 법
1. 생성하기 : 스트림 객체의 생성
2. 가공하기 : 필터링 및 매핑 등 원하는 결과를 만들어가는 중간 작업
3. 결과 만들기 : 최종적으로 결과를 만들어 반환하는 작업

배열을 통한 생성
Stream<T> stream = Arrays.stream(배열);

컬렉션을 통한 생성
Stream<T> stream = 컬렉션객체.stream();

기본타입형 스트림생성
Stream은 제네릭을 갖는데, 기본자료형을 다루려면 오토박싱 & 언박싱이 발생하여 비효율성이 증가한다.
비효율성을 줄이기 위해 데이터 소스의 요소를 기본형으로 다루는 스트림이 제공된다.
IntStream, LongStream, DoubleStream

스트림의 연산
- 메서드를 통해 연산을 하는데, 메서드의 실행 결과가 다시 스트림이다.
- 체인 형태로 이어서 연산을 하는것이 가능하다.
distinct() 						중복을 제거
filter(Predicate<T> predicate)	조건에 안맞는 요소를 제외
limit(long maxSize)				스트림의 일부를 잘라낸다.
skip(long n)					스트림의 일부를 건너뛴다.
peek(Counsumer<T> action)		스트림의 요소에 특정 작업을 수행
sorted()						 
sorted(Comparator<T> comparator)스트림의 요소를 정리

최종연산
- 연산 결과가 스트림이 아닌 연산
- 스트림 요소를 소모하므로 한 번만 가능

void forEach(Consumer<? super T> action>) 요소를 순회함
long count() 스트림의 요소의 개수 반환
Optional<T> max(Comparator<? super T> comparator) 최대값 반환
Optional<T> min(Comparator<? super T> comparator) 최소값 반환
Optional<T> findAny() 스트림의 요소를 하나 반환
Optional<T> findFirst() 스트림의 첫번째 요소를 반환
boolean allMatch(Predicate<T> p) 모두 만족하는지 확인
boolean anyMatch(Predicate<T> p) 하나라도 만족하는지 확인
boolean noneMatch(Predicate<T> p) 모두 만족하지 않는지 확인
Object[] toArray()
A[] toArray(InFunction<A[]> generator) 스트림의 모든 요소를 배열로 반환
Optional<T> reduce(BinaryOperator<T> accumulator)
T reduce(T identity, BinaryOperator<T> accumulator) 요소를 하나씩 줄여가면서 계산
